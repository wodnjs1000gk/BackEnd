<!DOCTYPE html>
<html>
  <head>
    <%- include('../partials/head') %>
  </head>
  <body>
    <%- include('../partials/nav') %>

    <div class="container mb-3">

      <h2 class="mb-3">Board</h2>

      <table class="board-table table table-sm border-bottom">

        <thead class="thead-light">
          <tr>
            <th scope="col">Title</th>
            <th scope="col" class="author">Author</th>
            <!-- table의 theader에 author 항목을 추가합니다. -->
            <th scope="col" class="date">Date</th>
          </tr>
        </thead>

        <tbody>
          <% if(posts == null || posts.length == 0){ %>
            <tr>
              <td colspan=2> There is no data to show :( </td>
            </tr>
          <% } %>
          <% posts.forEach(function(post) { %>
            <tr>
              <td>
          <!-- <a href="/posts/<%= post._id %><%= getPostQueryString() %>"><div class="ellipsis"><%= post.title %></div></a> -->
                <!--
                게시판에서 게시물 제목을 눌러 show route으로 가는 경우 page, limit query
                string을 전달해 줍니다. view에서는 res.locals의 항목들을 바로 사용할 수
                있기때문에 res.locals.getPostQueryString가 아니라 getPostQueryString로
                호출합니다.
                -->
                <a href="/posts/<%= post._id %><%= getPostQueryString() %>" class="title-container">
                  <!--
                  ellipsis(텍스트가 너무 길 경우 해당 범위 밖의 텍스트를 '...'로 표시하는 것)를 구현하기
                  위해 title-text, title-comments등의 CSS class들이 추가 되었습니다.
                  -->
                  <div data-search-highlight="title" class="title-ellipsis ellipsis float-left">
                    <span class="title-text"><%= post.title %></span>
                  </div>
                  <% if(post.commentCount){ %>
                    <small class="title-comments d-inline-block pl-2">(<%= post.commentCount %>)</small>
                  <% } %>
                  <!--
                  댓글의 수는 post route를 통해서 이미 post.commentCount에 저장되어 있으므로 어떻게 보여줄지만 고민하면됩니다. 
                  -->
                </a>
              </td>
              <td class="author"> <!-- 2 -->
           <!-- <div class="ellipsis"><%= post.author ? post.author.username : "" %></div> -->
              <!-- table의 tbody에 author 항목을 추가하고
              author가 있는 경우 author의 username을 표시합니다. -->
                <a href="/posts<%= getPostQueryString(false, { searchType:'author!', searchText:post.author.username }) %>">
                  <div data-search-highlight="author" class="ellipsis"><%= post.author ? post.author.username : "" %></div>
                </a>
              <td class="date">
                <span data-date="<%= post.createdAt %>"></span>
<!--
Post의 index를 table로 표시합니다.
1. data-date가 <span> element에 사용되었습니다.
public/js/script.js에 의해 post.createdAt,
즉 게시물 작성시간이 년-월-일의 형태로 출력됩니다.
-->
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>

      <!-- ~ normal board
      <div>
        <a class="btn btn-primary" href="/posts/new">New</a>
      </div>
      <div>
        <% if(isAuthenticated){ %>
          <a class="btn btn-primary" href="/posts/new">New</a>
        <% } %>
      </div>
    -->
      <!--
index.ejs에서 new 버튼은 로그인된 경우에만 보이게 됩니다.
참고로 isAuthenticated함수는 게시판 - Login 기능 추가강좌에서
index.js속에 만들었던 함수입니다. req.locals에 들어있어서
ejs에서 바로 사용할 수 있습니다.
      -->

      <div class="row mb-3">
        <div class="col-2">
          <!--
New 버튼을 pagination과 같은 줄에 놓기 위해 Bootstrap grid
(https://getbootstrap.com/docs/4.1/layout/grid) css (row, col-?)를
사용하였습니다.
          -->
          <% if(isAuthenticated){ %>
           <a class="btn btn-primary" href="/posts/new<%= getPostQueryString() %>">New</a>
         <% } %>
       </div>
        <nav class="col-8">
          <%
            var offset = 2;
            var previousBtnEnabled = currentPage>1;
            var nextBtnEnabled = currentPage<maxPage;
          %>
          <!--
          pagination에 사용될 변수들입니다.
- offset: 현재페이지 좌우로 몇개의 페이지들을 보여줄지를 정하는 변수입니다.
- previousBtnEnabled: 이전 페이지 버튼은 현재페이지가 1보다 큰 경우에만
활성화됩니다.
- nextBtnEnabled: 다음 페이지 버튼은 현재페이지가 마지막페이지(maxPage)보다
작은 경우에만 활성화됩니다.
          -->
          <ul class="pagination pagination-sm justify-content-center align-items-center h-100 mb-0">
            <li class="page-item <%= previousBtnEnabled?'':'disabled' %>">
              <a class="page-link" href="/posts<%= getPostQueryString(false, {page:currentPage-1}) %>" <%= previousBtnEnabled?'':'tabindex=-1' %>>«</a>
            </li>
            <% for(i=1;i<=maxPage;i++){ %>
              <% if(i==1 || i==maxPage || (i>=currentPage-offset && i<=currentPage+offset)){ %>
                <li class="page-item <%= currentPage==i?'active':'' %>"><a class="page-link" href="/posts<%= getPostQueryString(false, {page:i}) %>"> <%= i %> </a></li>
              <% } else if(i==2 || i==maxPage-1){ %>
                <li><a class="page-link">...</a></li>
              <% } %>
            <% } %>
            <li class="page-item <%= nextBtnEnabled?'':'disabled' %>">
              <a class="page-link" href="/posts<%= getPostQueryString(false, {page:currentPage+1}) %>" <%= nextBtnEnabled?'':'tabindex=-1' %>>»</a>
            </li>
          </ul>
        </nav>
      </div>
      <form action="/posts" method="get" class="post-index-tool">
        <!--
검색창의 사이즈를 조절하기 위해 post-index-tool CSS class를 추가했습니다.
        -->
        <div class="form-row">
          <div class="form-group col-3">
            <label>Show</label>
            <select name="limit" class="custom-select" onchange="this.parentElement.parentElement.parentElement.submit()">
              <option value="5" <%= limit==5?'selected':'' %>>5 posts</option>
              <option value="10" <%= limit==10?'selected':'' %>>10 posts</option>
              <option value="20" <%= limit==20?'selected':'' %>>20 posts</option>
            </select>
          </div>

          <div class="form-group col-9">
            <label>Search</label>
            <div class="input-group">
              <select name="searchType" class="custom-select">
                <option value="title,body" <%= searchType=='title,body'?'selected':'' %>>Title, Body</option>
                <option value="title" <%= searchType=='title'?'selected':'' %>>Title</option>
                <option value="body" <%= searchType=='body'?'selected':'' %>>Body</option>
                <option value="author" <%= searchType=='author'?'selected':'' %>>Author</option>
              </select>
              <input minLength="3" type="text" name="searchText" value="<%= searchText %>">
              <div class="input-group-append">
                <button class="btn btn-outline-primary" type="submit">Search</button>
              </div>
            </div>
          </div>
          <!--
검색 form입니다. Bootstrap의 input group(https://getbootstrap.com/docs/4.1/components/input-group)을
사용하여 검색어 입력 form과 search 버튼을 이어붙였습니다.
          -->

        </div>
      </form>

    </div>
  </body>
</html>
© 2021 GitHub, Inc.
