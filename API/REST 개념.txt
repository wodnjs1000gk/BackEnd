- REST
REST란 Representational State Transfer 의 약자로 소프트웨어
프로그램 개발의 아키텍처의 한 형식입니다.
Representational State Transfer- '대표적인 상태 전달' 이 단어만 듣고
REST가 무슨 뜻인지 알 수 있는 사람은 영어권에서도 없을 것이라고 생각이 되는데요,
저는 개인적으로 이 단어를 변형해서
'자원(resource)의 대표(representation)에 의한 상태 전달'
이라고 설명하려 합니다.

- 자원의 대표
'자원'이란 뜻은 넓은 의미로 해당 소프트웨어가 관리하는 모든 것이 될 수 있습니다.
예를 들어 DB에 학생 명부가 저장되어 있다고 한다면 이 학생들의 정보가 자원이 됩니다.
그리고 '자원의 대표'의 의미는 그 자원을 대표하기 위한 이름을 뜻합니다.
학생데이터를 대표하기 위한 이름은 학생(students:복수형을 사용합니다)입니다.
학생 전체 명부가 아니라 명부상의 한 학생에 대한 자원을 얻고자 한다면 대표이름과
한 학생을 특정할 수 있는 값(id 등)이 사용됩니다.

- 상태 전달
데이터가 요청되어지는 시점에서 자원의 상태(정보)를 전달하는 것을 뜻합니다.
데이터를 요청하는 시점에 따라 데이터가 바뀔 수도 있기 때문에 '상태'라는 표현을 쓴
것이라 추측해 봅니다. 프로그램이 학생 명부 전체 리스트를 요청받으면 요청받은 시점의
'상태' 즉 데이터를 전달하게 됩니다. 또한 새로운 학생 명부 '상태'를 프로그램에 전달하여
해당 자원을 수정할 수도 있습니다.

이처럼 자원을 이름으로 구분하고 해당 자원의 상태를 주고 받는 모든 것이 REST라고 
할 수 있지만, 일반적으로 REST라고 하면 좁은 의미로 HTTP를 통해 CRUD를 실행하는
API를 뜻합니다.

HTTP 프로토콜을 이용하기 때문에 URL(route)를 통해 자원을 특정짓고 HTTP Verbs를 통해
할일(CRUD)을 지정합니다. 또한 JSON 혹은 XML를 통해 데이터를 주고 받는 것이
일반적입니다.

- REST를 정의하기 위한 조건

1) '클라이언트-서버' 구조: 자원(resource)이 있는 쪽이 서버가 되며, 요청을 하는 쪽이 해당 서버에 대한 클라이언트가 됩니다.
2) 무상태(Stateless): '서버'는 각각의 요청을 완전히 별개의 것으로 인식하고 처리해야하며, 이전 요청이 다음 요청의 처리에 연관이 되어서는 안됩니다. 즉 서버 session을 사용해선 안됩니다. 서버의 처리 방식에 일관성을 부여하고 서버의 부담을 줄이기 위한 것으로 보입니다.
3) 캐시 처리 가능(Cacheable): 대량의 요청을 효율적으로 처리하기 위해 캐시가 요구됩니다.
4) 계층화(Layered System)
5) Code on demand (optional)
6) 인터페이스 일관성
